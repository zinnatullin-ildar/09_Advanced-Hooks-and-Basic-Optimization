Хук useCallback()

Хук useCallback() весьма похож на useMemo(). Он принимает функцию и список зависимостей.
Также, как и useMemo(), он возвращает мемоизированное значение, только в отличие от useMemo(),
мы должны сделать так, чтобы он вернул функцию.

В отличие от useMemo(), хук useCallback() сразу принимает callback-функцию, которую нужно
мемоизировать, а не анонимную функцию, из которой нужно вернуть необходимое значение. 
Использовать хук useCallback() для создания функций удобнее, и, таким образом, нам легче 
ориентироваться в коде. 
Стоит понимать, что useCallback() в следующем виде является эквивалентом useMemo():

useCallback(fn, deps) 
// это то же самое, что и 
useMemo(() => fn, deps)

Хук useCallback() возвращает мемоизированную callback-функцию. Для нас это значит, что он
сохранит ссылку на функцию, пока массив зависимостей не изменится.

Принципиально можно определить, что useCallback() используют для сохранения ссылки на несериализуемые
объекты (функции), а useMemo() для сериализуемых. Такое разделение нам необходимо, так как мы можем
выполнять "поверхностную сверку" сериализуемых объектов и не можем у несериализуемых. Это влияет на 
использование способов оптимизации. Один из таких способов мы рассмотрим в части по React.memo(). 