Свойство props.children - это объект, содержащий описание дочерних элементов. Это ненастоящие потомки, 
не компоненты, а всего лишь описание. Мы не можем изменить какие-либо параметры или редактировать
какие-либо функции у них. Мы имеем доступ только к чтению.

React предоставляет несколько API-методов для работы с непрозрачной структурой данных props.children. 
Она называется непрозрачной, так как мы заранее не знаем, что придёт к нам в children. 
Рассмотрим, какие методы есть у React.Children.

React.Children.map()
React.Children.map(children, (child) => { /* ... */ });

Вызывает функцию для каждого непосредственного потомка в children, передавая их по очереди в child.
Возвращаемое значение из функции - обновленный потомок (аналогично методу map() у обычных массивов в JS).
Если children - это массив, он будет пройден, функция будет вызвана для каждого потомка в массиве,
и вернется обновленный массив. 
Если children равен null или undefined, этот метод вернёт null или undefined, а не массив.
Если children - это Fragment, он будет рассматриваться как целый потомок, а элементы внутри не будут пройдены.


React.Children.forEach()
React.Children.forEach(children, (child) => { /* ... */ });

Похож на React.Children.map(), но не возвращает обновленный массив. Также можно сравнить с методом массивов
forEach() в обычном JS. Проходит по каждому элементу и вызывает callback-функцию. 


React.Children.count()
React.Children.count(children);

Возвращает общее количество компонентов в children, равное числу раз, сколько раз была бы вызвана callback-функция,
переданная в map() или forEach().


React.Children.toArray
React.Children.toArray(children)

Возвращает непрозрачную структуру данных children в виде плоского массива с ключами, заданные каждому дочернему элементу. 
Полезно, если вы хотите манипулировать коллекциями потомков в ваших методах рендера, особенно если вы хотите отсортировать
или извлечь часть this.props.children перед её передачей куда-либо.

