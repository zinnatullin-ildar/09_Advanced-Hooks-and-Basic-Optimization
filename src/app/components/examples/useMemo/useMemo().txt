Хук useMemo()

В течении жизненного цикла приложения иногда возникает необходимость производить тяжелые вычисления. 
Если такие вычисления происходят внутри React-компонента, то они будут происходить при каждом рендере.
Чтобы избежать повторных вычислений при ререндере компонента, можно воспользоваться мемоизаций. 

Мемоизация (англ. memoization от англ. memory и optimization) - в программировании сохранение результатов
вычисления для предотвращения повторных вычислений. Это один из способов оптимизации, применяемых для 
увеличения скорости выполнения компьютерных программ. Перед вызовом функции проверяется, вызывалась 
ли функция ранее:
- если нет, то функция вызывается, и результат ее выполнения сохраняется;
- если вызывалась, то используется сохраненный результат.

Хук useMemo() позволяет производить мемоизацию внутри React-компонента. Данный хук возвращает мемоизированное
значение. Когда мы им пользуемся, то передаём функцию, которая будет вычислять нужное значение и массив 
зависимостей, при изменении которых функция будет вызвана заново:

// вызывается на каждый ререндер
const myParam = useMemo(() => {
  return calcAnyByCount(count); // вызывается при изменении count
}, [count]); 
// count - зависимость, может быть несколько

Здесь хуку useMemo() передана функция, результат которой зависит от переменной count. При первом рендере будет
вызвана функция calcAnyByCount(count), и  хук запомнит результат выполнения этой функции. При повторном рендеринге:
Если изменений не было, она просто вернёт значение, которое было вычислено ранее.
- если count не изменится, то будет возвращено мемоизированное значение (то, которое мы вычислили ранее);
- если count измениться, то calcAnyByCount(count) будет вызвана заново, и хук запомнит это новое значение.

Нужно понимать, что useMemo() вызывается каждый раз при рендере, так же как и любая другая функция.
Отличие лишь в том, что перед тем как вычислять значение, она проверит, изменились ли зависимости. 
Переменная count является зависимостью и передаётся аргументом в функцию calcAnyByCount(). В этом есть суть
зависимостей - они должны участвовать в вычислении. Если вам нечего передать в хук как зависимость, то рассмотрите
другие возможности оптимизации (например вынесите вычисление за пределы компонента). В некоторых случаях можно сделать
вычисление в useState(). 

Подытожим: useMemo() позволяет нам оптимизировать React-компонент. Он производит мемоизацию и тем самым предотвращает
повторные вычисления при каждом рендере, если его зависимости не изменились. Так же useMemo() позволяет сохранить ссылку
на объект, который мы хотим передавать как зависимость в useEffect(). 